---

- name: validate mandatory variables
  no_log: true
  assert:
    that: item | mandatory
  with_items:
    - "{{ aptly_api_basic_auth_username }}"
    - "{{ aptly_api_basic_auth_password }}"

- name: import aptly apt repository key
  become: yes
  apt_key:
    keyserver: pool.sks-keyservers.net
    id: ED75B5A4483DA07C

- name: add aptly debian repository
  become: yes
  apt_repository:
    # "Please don't worry about squeeze part in repo name: aptly package should work on Debian squeeze+, Ubuntu 10.0+."
    # (source: https://www.aptly.info/download/)
    repo: deb http://repo.aptly.info/ squeeze main
    update_cache: yes

- name: install apt requirements
  become: yes
  apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: "{{ aptly_apt_cache_valid_time }}"
  with_items:
    - aptly
    - nginx
    - python-passlib

- name: create required directories
  become: yes
  file:
    path: "{{ item | dirname }}"
    state: directory
  with_items:
    - "{{ aptly_data_directory_location }}"
    - "{{ aptly_api_ssl_cert_file_location }}"
    - "{{ aptly_api_ssl_key_file_location }}"
    - "{{ aptly_api_password_file_location }}"
    - "{{ aptly_publish_location }}"

- name: create aptly configuration
  become: yes
  template:
    src: aptly.conf.j2
    dest: /etc/aptly.conf
  notify: restart_aptly_api

- name: ensure aptly configuration does not exist in home directory (overrides /etc configuration)
  become: yes
  file:
    path: "{{ ansible_env.HOME }}/.aptly.conf"
    state: absent

- name: configure aptly REST API systemd service
  become: yes
  template:
    src: "aptly-api.service.j2"
    dest: "/etc/systemd/system/{{ aptly_api_service_name }}.service"
  notify: restart_aptly_api

- name: start aptly REST api
  become: yes
  systemd:
    name: "{{ aptly_api_service_name }}"
    state: started
    daemon_reload: yes

- name: create aptly repository
  become: yes
  aptly_repo:
    name: "{{ item.name }}"
    options: "{{ item.options }}"
    aptly_binary: "{{ aptly_aptly_binary_location }}"
  vars:
    ansible_python_interpreter: python3
  with_items: "{{ aptly_repositories }}"

- name: prepare for SSL
  when: aptly_api_ssl_enabled
  block:
    - name: copy ssl certificate
      become: yes
      copy:
        content: "{{ aptly_api_ssl_cert }}"
        dest: "{{ aptly_api_ssl_cert_file_location }}"
        owner: root
        mode: 0600
      notify: restart_nginx

    - name: copy ssl key
      become: yes
      copy:
        content: "{{ aptly_api_ssl_key }}"
        dest: "{{ aptly_api_ssl_key_file_location }}"
        owner: root
        mode: 0600
      notify: restart_nginx

- name: expose aptly.sock to www-data
  become: yes
  file:
    path: /var/run/aptly.sock
    mode: 0660
    group: www-data

- name: configure nginx
  become: yes
  template:
    src: "aptly-api.nginx.conf.j2"
    dest: /etc/nginx/conf.d/aptly-api.nginx.conf
    mode: 0700
    owner: www-data
  notify: restart_nginx

- name: disable "default" nginx site from running on port 80
  become: yes
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart_nginx

#- name: write basic auth password
#  become: yes
#  htpasswd:
#    path: "{{ aptly_api_password_file_location }}"
#    name: "{{ aptly_api_basic_auth_username }}"
#    password: "{{ aptly_api_basic_auth_password }}"
#    owner: root
#    group: www-data
#    mode: 0640
#  notify: restart_nginx



# TODO: nginx serve published packages




# Client: https://github.com/sepulworld/aptly_cli
